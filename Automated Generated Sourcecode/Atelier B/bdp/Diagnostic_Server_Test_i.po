THEORY ProofList IS
_f(1) & _f(2) & _f(12) & _f(13) & Operation_patchfile_compatibility_test.2,(_f(30) & _f(3) => _f(32));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_patchfile_compatibility_test.1,(_f(26) & _f(27) & _f(28) & _f(29) & _f(3) => _f(31));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_patchfile_quality_test.2,(_f(23) & _f(3) => _f(25));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_patchfile_quality_test.1,(_f(21) & _f(22) & _f(3) => _f(24));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_sourcecode_compile.1,(_f(19) & _f(3) => _f(21));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_sourcecode_test.3,(_f(16) & _f(18) & _f(3) => _f(20));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_sourcecode_test.2,(_f(16) & _f(17) & _f(3) => _f(19));
_f(1) & _f(2) & _f(12) & _f(13) & Operation_sourcecode_test.1,(_f(14) & _f(15) & _f(3) => _f(19));
_f(1) & _f(2) & Initialisation.8,(_f(3) => _f(11));
_f(1) & _f(2) & Initialisation.7,(_f(3) => _f(10));
_f(1) & _f(2) & Initialisation.6,(_f(3) => _f(9));
_f(1) & _f(2) & Initialisation.5,(_f(3) => _f(8));
_f(1) & _f(2) & Initialisation.4,(_f(3) => _f(7));
_f(1) & _f(2) & Initialisation.3,(_f(3) => _f(6));
_f(1) & _f(2) & Initialisation.2,(_f(3) => _f(5));
_f(1) & _f(2) & Initialisation.1,(_f(3) => _f(4))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
((1..2)*{Result}): FIN(NATURAL*{Result})& not(((1..2)*{Result}) = {}) & ((1..1)*{Quality_Test}): FIN(NATURAL*{Quality_Test})& not(((1..1)*{Quality_Test}) = {}) & ((1..3)*{Compatibility_Test}): FIN(NATURAL*{Compatibility_Test})& not(((1..3)*{Compatibility_Test}) = {}) & ((1..6)*{Hardware_Test}): FIN(NATURAL*{Hardware_Test})& not(((1..6)*{Hardware_Test}) = {}) & ((1..6)*{Software_Test}): FIN(NATURAL*{Software_Test})& not(((1..6)*{Software_Test}) = {}) & ((1..4)*{Network_Test}): FIN(NATURAL*{Network_Test})& not(((1..4)*{Network_Test}) = {}) & ((1..2)*{Deveop_Language}): FIN(NATURAL*{Deveop_Language})& not(((1..2)*{Deveop_Language}) = {}) & ((1..4)*{Patchfile_Format}): FIN(NATURAL*{Patchfile_Format})& not(((1..4)*{Patchfile_Format}) = {}) & ((1..3)*{Coding_Standard}): FIN(NATURAL*{Coding_Standard})& not(((1..3)*{Coding_Standard}) = {}) & ((1..2)*{Sourcecode_Format}): FIN(NATURAL*{Sourcecode_Format})& not(((1..2)*{Sourcecode_Format}) = {});
"Refinement is correct";
(((1|->Deveop_Language)) : ({}));
(((1|->Coding_Standard)) : ({}));
(((2|->Result)) : ({}));
(((1|->Patchfile_Format)) : ({}));
(((1|->Quality_Test)) : ({}));
(((1|->Hardware_Test)) : ({}));
(((1|->Software_Test)) : ({}));
(((1|->Network_Test)) : ({}));
((Language) : (((1..2)*{Deveop_Language}))) & ((Standard) : (((1..3)*{Coding_Standard}))) & ((Sourcecode_Test_Result) : (((1..2)*{Result}))) & ((Patchfile_Status) : (((1..4)*{Patchfile_Format}))) & ((Patchfile_Execution_Result) : (((1..1)*{Quality_Test}))) & ((Qulity_Test_Result) : (((1..2)*{Result}))) & ((Hardware_Compatibility_Test) : (((1..6)*{Hardware_Test}))) & ((Software_Compatibility_Test) : (((1..6)*{Software_Test}))) & ((Network_Compatibility_Test) : (((1..4)*{Network_Test}))) & ((Hardware_Test_Result) : (((1..2)*{Result}))) & ((Software_Test_Result) : (((1..2)*{Result}))) & ((Network_Test_Result) : (((1..2)*{Result}))) & ((Compatibility_Test_Result) : (((1..2)*{Result})));
((Language) = (Language$1)) & ((Standard) = (Standard$1)) & ((Sourcecode_Test_Result) = (Sourcecode_Test_Result$1)) & ((Patchfile_Status) = (Patchfile_Status$1)) & ((Patchfile_Execution_Result) = (Patchfile_Execution_Result$1)) & ((Qulity_Test_Result) = (Qulity_Test_Result$1)) & ((Hardware_Compatibility_Test) = (Hardware_Compatibility_Test$1)) & ((Software_Compatibility_Test) = (Software_Compatibility_Test$1)) & ((Network_Compatibility_Test) = (Network_Compatibility_Test$1)) & ((Hardware_Test_Result) = (Hardware_Test_Result$1)) & ((Software_Test_Result) = (Software_Test_Result$1)) & ((Network_Test_Result) = (Network_Test_Result$1)) & ((Compatibility_Test_Result) = (Compatibility_Test_Result$1));
((Language$1) = ((1|->Deveop_Language)));
((Standard$1) = ((1|->Coding_Standard)));
not(((Language$1) = ((1|->Deveop_Language))) & ((Standard$1) = ((1|->Coding_Standard))));
((((Language$1) = ((2|->Deveop_Language))) & ((Standard$1) = ((2|->Coding_Standard)))) or (((Standard$1) = ((3|->Coding_Standard)))));
not(((((Language$1) = ((2|->Deveop_Language))) & ((Standard$1) = ((2|->Coding_Standard)))) or (((Standard$1) = ((3|->Coding_Standard))))));
((Sourcecode_Test_Result$1) = ((1|->Result)));
((Sourcecode_Test_Result$1) = ((2|->Result)));
((Patchfile_Status$1) = ((3|->Patchfile_Format)));
not(((Patchfile_Execution_Result$1) = ((1|->Quality_Test))));
not(((Patchfile_Status$1) = ((3|->Patchfile_Format))) & not(((Patchfile_Execution_Result$1) = ((1|->Quality_Test)))));
((Qulity_Test_Result$1) = ((1|->Result)));
((Qulity_Test_Result$1) = ((2|->Result)));
((((((((Qulity_Test_Result$1) = ((1|->Result))) & ((Hardware_Compatibility_Test$1) = ((2|->Hardware_Test)))) or (((Hardware_Compatibility_Test$1) = ((3|->Hardware_Test)))) or (((Hardware_Compatibility_Test$1) = ((4|->Hardware_Test)))) or (((Hardware_Compatibility_Test$1) = ((5|->Hardware_Test)))) or (((Hardware_Compatibility_Test$1) = ((6|->Hardware_Test))))) & ((Software_Compatibility_Test$1) = ((2|->Software_Test)))) or (((Software_Compatibility_Test$1) = ((3|->Software_Test)))) or (((Software_Compatibility_Test$1) = ((4|->Software_Test)))) or (((Software_Compatibility_Test$1) = ((5|->Software_Test)))) or (((Software_Compatibility_Test$1) = ((6|->Software_Test))))) & ((Network_Compatibility_Test$1) = ((2|->Network_Test)))) or (((Network_Compatibility_Test$1) = ((3|->Network_Test)))) or (((Network_Compatibility_Test$1) = ((4|->Network_Test)))));
((Hardware_Test_Result$1) = ((1|->Result)));
((Software_Test_Result$1) = ((1|->Result)));
((Network_Test_Result$1) = ((1|->Result)));
not(((((((((Qulity_Test_Result$1) = ((1|->Result))) & ((Hardware_Compatibility_Test$1) = ((2|->Hardware_Test)))) or (((Hardware_Compatibility_Test$1) = ((3|->Hardware_Test)))) or (((Hardware_Compatibility_Test$1) = ((4|->Hardware_Test)))) or (((Hardware_Compatibility_Test$1) = ((5|->Hardware_Test)))) or (((Hardware_Compatibility_Test$1) = ((6|->Hardware_Test))))) & ((Software_Compatibility_Test$1) = ((2|->Software_Test)))) or (((Software_Compatibility_Test$1) = ((3|->Software_Test)))) or (((Software_Compatibility_Test$1) = ((4|->Software_Test)))) or (((Software_Compatibility_Test$1) = ((5|->Software_Test)))) or (((Software_Compatibility_Test$1) = ((6|->Software_Test))))) & ((Network_Compatibility_Test$1) = ((2|->Network_Test)))) or (((Network_Compatibility_Test$1) = ((3|->Network_Test)))) or (((Network_Compatibility_Test$1) = ((4|->Network_Test))))) & ((Hardware_Test_Result$1) = ((1|->Result))) & ((Software_Test_Result$1) = ((1|->Result))) & ((Network_Test_Result$1) = ((1|->Result))));
((Compatibility_Test_Result$1) = ((1|->Result)));
((Compatibility_Test_Result$1) = ((2|->Result)))
END
&
THEORY EnumerateX IS
Coding_Standard == {Misra_C,Misra_C_Plus,AUTOSAR_C_Plus};
Compatibility_Test == {Hardware_Compatibility,Software_Compatibility,Network_Compatibility};
Deveop_Language == {C_Language,C_Plus_Language};
Hardware_Test == {Empty_Hardware,Memory_Type,Memory_Size,Memory_Speed,Input_Device,Output_Device};
Network_Test == {Empty_Network,Wifi,Data_Network,Bluetooth};
Patchfile_Format == {None,Sourcecode,Binary,Encrypted_Binary};
Quality_Test == {Patchfile_error};
Result == {Valid,Invalid};
Software_Test == {Empty_Software,Windows,Linux,Mac,Current_Version_Software,Other_Version_Software};
Sourcecode_Format == {Written_Sourcecode,Writing_Sourcecode}
END
