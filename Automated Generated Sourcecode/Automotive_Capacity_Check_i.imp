/* Automotive_Capacity_Check_i
 * Author: SANE
 * Creation date: 2023-04-25
 */

IMPLEMENTATION Automotive_Capacity_Check_i
REFINES Storage

INITIALISATION
    Storage_Capacity := 100;
    Storage_Capacity_Criteria := 85;
    Version := 0;
    File_Type := Empty_Data;
    Save_Result := Not_Save;
    Tag := Normal_State;
    Stored_Capacity := 0; 
    Data_Status := Empty_File;
    Data_Operation := None;
    Send_Target := Empty_Target;
    Update_Request_Result := Update_Unrequired;
    Subject_Entity := Noone

OPERATIONS
    capacity_check(File_Size) = 
    BEGIN
        IF File_Type = Encrypted_Binary &
           Stored_Capacity = File_Size &
           Storage_Capacity < Storage_Capacity_Criteria
           
            THEN
               Save_Result := Save;
               Tag := Normal_State
               
               ELSE IF File_Type = Encrypted_Binary &
                       Stored_Capacity = File_Size &
                       Storage_Capacity >= Storage_Capacity_Criteria &
                       Storage_Capacity < 100
                       
               THEN
                   Save_Result := Not_Save;
                   Tag := Alarm
                   
               ELSE IF File_Type = Encrypted_Binary &
                       Stored_Capacity = File_Size &
                       Storage_Capacity >= 100
                       
               THEN
                   Save_Result := Not_Save;
                   Tag := Overwrite
                   
               ELSE
                   Save_Result := Not_Save
               END
            END    
        END
    END;
    
    version_check(Vehicle_Patchfile_Version, Patchfile_Version) = 
    BEGIN
        IF Vehicle_Patchfile_Version > Patchfile_Version
            
        THEN
           Data_Operation := Send;
           Send_Target := Secondary_ECU
        ELSE
           Data_Operation := None
        END
    END;
    
    patchfile_installation = 
    BEGIN
        IF Data_Status = Patchfile 
            
        THEN
           Data_Operation := Install
        ELSE
           Data_Operation := None
        END
    END;
    
    patchfile_backup = 
    BEGIN
        IF Data_Status = Patchfile 
            
        THEN
           Data_Operation := Backup
        ELSE
           Data_Operation := None
        END
    END;
    
    patchfile_recovery = 
    BEGIN
        IF Data_Status = Patchfile 
            
        THEN
           Data_Operation := Recovery
        ELSE
           Data_Operation := None
        END
    END;
    
    configuration_management(Current_Item_Version, Latest_Item_Version) = skip
END  